/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.validation;

import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.myDsl.Tree;
import org.xtext.example.mydsl.myDsl.MyDslPackage;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MyDslValidator extends AbstractMyDslValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
	
	@Check
	public void checkBranchLevelsEmpty(Tree tree) {
		if (tree.getBranchLevels().isBlank()) {
			warning("the number of branch levels must be specified", tree, MyDslPackage.Literals.TREE__BRANCH_LEVELS);
		}
	}
	
	@Check
	public void checkSizeNotEmpty(Tree tree) {
		if (tree.getSize().isBlank()) {
			warning("the tree must have a size", tree, MyDslPackage.Literals.TREE__SIZE);
		}
	}
	
	@Check
	public void checkSizeLargerThanZero(Tree tree) {
		if (! (Float.valueOf(tree.getSize()) > 0)) {
			warning("the tree size must be larger than 0", tree, MyDslPackage.Literals.TREE__SIZE);
		}
	}
	
	@Check
	public void checkBranchScaleMinMax(Tree tree) {
		Float branchMin = Float.valueOf(tree.getBranch().getBranchScale().getMinMax().getMin());
		Float branchMax = Float.valueOf(tree.getBranch().getBranchScale().getMinMax().getMax());
		if (branchMin > branchMax) {
			warning("the minimum branch scale cannot be larger than the maximum", tree, MyDslPackage.Literals.TREE__BRANCH);
		}
	}
	
	@Check
	public void checkBranchAngleRotation(Tree tree) {
		Float xRotationMin = Float.valueOf(tree.getBranch().getBranchRotation().getXBranchRotation().getMinMax().getMin());
		Float xRotationMax = Float.valueOf(tree.getBranch().getBranchRotation().getXBranchRotation().getMinMax().getMax());
		if ((xRotationMin < 0 || xRotationMin > 360) || (xRotationMax < 0 || xRotationMax > 360)) {
			warning("the angle of rotation must be in the range (0,360)", tree, MyDslPackage.Literals.TREE__BRANCH);
		}
	}
}
